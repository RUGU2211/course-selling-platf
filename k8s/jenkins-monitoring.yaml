# Jenkins Monitoring Stack - SonarQube, Nexus, Prometheus, Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarqube-config
  namespace: jenkins
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality
data:
  SONAR_JDBC_URL: "jdbc:postgresql://postgres.jenkins.svc.cluster.local:5432/sonar"
  SONAR_JDBC_USERNAME: "sonar"
  SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"

---
apiVersion: v1
kind: Secret
metadata:
  name: sonarqube-secrets
  namespace: jenkins
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality
type: Opaque
stringData:
  sonar-jdbc-password: "sonar"
  postgres-password: "sonar"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data-pvc
  namespace: jenkins
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: jenkins
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: jenkins
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "sonar"
        - name: POSTGRES_DB
          value: "sonar"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sonar
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sonar
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: jenkins
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: jenkins
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarqube
      app.kubernetes.io/component: code-quality
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarqube
        app.kubernetes.io/component: code-quality
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/api/monitoring/metrics"
    spec:
      initContainers:
      - name: init-sysctl
        image: busybox:1.36
        command:
        - sysctl
        - -w
        - vm.max_map_count=524288
        securityContext:
          privileged: true
      containers:
      - name: sonarqube
        image: sonarqube:10.3-community
        ports:
        - containerPort: 9000
        env:
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-secrets
              key: sonar-jdbc-password
        envFrom:
        - configMapRef:
            name: sonarqube-config
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        - name: sonarqube-logs
          mountPath: /opt/sonarqube/logs
        - name: sonarqube-extensions
          mountPath: /opt/sonarqube/extensions
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data-pvc
      - name: sonarqube-logs
        emptyDir: {}
      - name: sonarqube-extensions
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: jenkins
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/api/monitoring/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
  selector:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/component: code-quality

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nexus-data-pvc
  namespace: jenkins
  labels:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/component: artifact-repository
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus
  namespace: jenkins
  labels:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/component: artifact-repository
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nexus
      app.kubernetes.io/component: artifact-repository
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nexus
        app.kubernetes.io/component: artifact-repository
    spec:
      securityContext:
        runAsUser: 997
        runAsGroup: 997
        fsGroup: 997
      containers:
      - name: nexus
        image: sonatype/nexus3:3.42.0
        ports:
        - containerPort: 8081
        env:
        - name: NEXUS_SECURITY_RANDOMPASSWORD
          value: "false"
        volumeMounts:
        - name: nexus-data
          mountPath: /nexus-data
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /service/rest/v1/status
            port: 8081
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /service/rest/v1/status
            port: 8081
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: nexus-data
        persistentVolumeClaim:
          claimName: nexus-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: nexus
  namespace: jenkins
  labels:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/component: artifact-repository
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/component: artifact-repository

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: jenkins
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "jenkins_rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'jenkins'
        static_configs:
          - targets: ['jenkins.jenkins.svc.cluster.local:8080']
        metrics_path: '/prometheus'
        scrape_interval: 30s

      - job_name: 'sonarqube'
        static_configs:
          - targets: ['sonarqube.jenkins.svc.cluster.local:9000']
        metrics_path: '/api/monitoring/metrics'
        scrape_interval: 60s

      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  jenkins_rules.yml: |
    groups:
      - name: jenkins
        rules:
          - alert: JenkinsDown
            expr: up{job="jenkins"} == 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Jenkins is down"
              description: "Jenkins has been down for more than 5 minutes."

          - alert: JenkinsHighCPU
            expr: jenkins_system_cpu_load > 0.8
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "Jenkins high CPU usage"
              description: "Jenkins CPU usage is above 80% for more than 10 minutes."

          - alert: JenkinsHighMemory
            expr: jenkins_vm_memory_heap_used / jenkins_vm_memory_heap_max > 0.9
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "Jenkins high memory usage"
              description: "Jenkins memory usage is above 90% for more than 10 minutes."

          - alert: JenkinsBuildFailures
            expr: increase(jenkins_builds_failed_build_count[1h]) > 5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High number of Jenkins build failures"
              description: "More than 5 builds have failed in the last hour."

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: jenkins
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: jenkins
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.2
        ports:
        - containerPort: 9090
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: jenkins
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: jenkins

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: jenkins
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: jenkins
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: jenkins
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus.jenkins.svc.cluster.local:9090
        access: proxy
        isDefault: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: jenkins
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: visualization
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: visualization
    spec:
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  # Change in production
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: jenkins
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-monitoring-ingress
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-monitoring
    app.kubernetes.io/component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - sonarqube.course-platform.local
    - nexus.course-platform.local
    - prometheus.course-platform.local
    - grafana.course-platform.local
    secretName: jenkins-monitoring-tls
  rules:
  - host: sonarqube.course-platform.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarqube
            port:
              number: 9000
  - host: nexus.course-platform.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus
            port:
              number: 8081
  - host: prometheus.course-platform.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
  - host: grafana.course-platform.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000