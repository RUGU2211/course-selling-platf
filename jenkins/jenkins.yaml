# Jenkins Configuration as Code (JCasC) for Course Selling Platform
jenkins:
  systemMessage: "Jenkins for Course Selling Platform - Automated CI/CD Pipeline"
  numExecutors: 2
  mode: NORMAL
  scmCheckoutRetryCount: 3
  
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "${JENKINS_ADMIN_PASSWORD:-admin123}"
          properties:
            - "hudson.model.MyViewsProperty"
            - "hudson.search.UserSearchProperty"
            - "jenkins.security.ApiTokenProperty"
            - "hudson.security.HudsonPrivateSecurityRealm$Details"

  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            description: "Jenkins administrators"
            permissions:
              - "Overall/Administer"
            assignments:
              - "admin"
          - name: "developer"
            description: "Developers with build permissions"
            permissions:
              - "Overall/Read"
              - "Job/Build"
              - "Job/Cancel"
              - "Job/Read"
              - "Job/Workspace"
              - "View/Read"
            assignments:
              - "authenticated"

  globalNodeProperties:
    - envVars:
        env:
          - key: "DOCKER_REGISTRY"
            value: "ghcr.io"
          - key: "KUBERNETES_NAMESPACE"
            value: "course-platform"
          - key: "SONAR_HOST_URL"
            value: "${SONAR_HOST_URL:-http://sonarqube:9000}"
          - key: "NEXUS_URL"
            value: "${NEXUS_URL:-http://nexus:8081}"

  clouds:
    - kubernetes:
        name: "kubernetes"
        serverUrl: "${KUBERNETES_SERVER_URL:-https://kubernetes.default.svc.cluster.local}"
        namespace: "jenkins"
        jenkinsUrl: "http://jenkins:8080"
        jenkinsTunnel: "jenkins-agent:50000"
        connectTimeout: 5
        readTimeout: 15
        retentionTimeout: 5
        maxRequestsPerHost: 32
        templates:
          - name: "jenkins-agent"
            namespace: "jenkins"
            label: "jenkins-agent"
            nodeUsageMode: NORMAL
            containers:
              - name: "jnlp"
                image: "jenkins/inbound-agent:latest"
                workingDir: "/home/jenkins/agent"
                command: ""
                args: ""
                ttyEnabled: true
                resourceRequestCpu: "100m"
                resourceRequestMemory: "256Mi"
                resourceLimitCpu: "500m"
                resourceLimitMemory: "512Mi"
              - name: "docker"
                image: "docker:dind"
                workingDir: "/home/jenkins/agent"
                command: "dockerd-entrypoint.sh"
                args: ""
                ttyEnabled: true
                privileged: true
                resourceRequestCpu: "100m"
                resourceRequestMemory: "256Mi"
                resourceLimitCpu: "1000m"
                resourceLimitMemory: "1Gi"
                envVars:
                  - envVar:
                      key: "DOCKER_TLS_CERTDIR"
                      value: ""
            volumes:
              - emptyDirVolume:
                  mountPath: "/var/lib/docker"
                  memory: false
            serviceAccount: "jenkins"
            idleMinutes: 5
            activeDeadlineSeconds: 120
            slaveConnectTimeout: 100

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: "github-credentials"
              username: "${GITHUB_USERNAME}"
              password: "${GITHUB_TOKEN}"
              description: "GitHub credentials for repository access"
          - string:
              scope: GLOBAL
              id: "sonar-token"
              secret: "${SONAR_TOKEN}"
              description: "SonarQube authentication token"
          - string:
              scope: GLOBAL
              id: "snyk-token"
              secret: "${SNYK_TOKEN}"
              description: "Snyk security scanning token"
          - string:
              scope: GLOBAL
              id: "slack-token"
              secret: "${SLACK_TOKEN}"
              description: "Slack notification token"
          - dockerServerEndpoint:
              scope: GLOBAL
              id: "docker-registry"
              uri: "https://ghcr.io"
              credentialsId: "github-credentials"
              description: "GitHub Container Registry"
          - kubeconfigFile:
              scope: GLOBAL
              id: "kubernetes-config"
              kubeconfigSource:
                directEntry:
                  kubeconfig: "${KUBECONFIG_CONTENT}"
              description: "Kubernetes cluster configuration"

tool:
  git:
    installations:
      - name: "Default"
        home: "git"
  
  maven:
    installations:
      - name: "Maven-3.9.5"
        home: "/opt/maven"
  
  nodejs:
    installations:
      - name: "NodeJS-18"
        home: "/usr/bin"
        properties:
          - installSource:
              installers:
                - nodeJSInstaller:
                    id: "18.18.2"
                    npmPackagesRefreshHours: 72

  sonarRunnerInstallation:
    installations:
      - name: "SonarScanner"
        home: "/opt/sonar-scanner"

jobs:
  - script: |
      multibranchPipelineJob('course-platform-backend') {
        branchSources {
          github {
            id('backend-repo')
            scanCredentialsId('github-credentials')
            repoOwner('your-org')
            repository('course-selling-platform')
            includes('main develop feature/* release/* hotfix/*')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
            numToKeep(20)
          }
        }
        triggers {
          periodic(5)
        }
      }

  - script: |
      multibranchPipelineJob('course-platform-frontend') {
        branchSources {
          github {
            id('frontend-repo')
            scanCredentialsId('github-credentials')
            repoOwner('your-org')
            repository('course-selling-platform')
            includes('main develop feature/* release/* hotfix/*')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
            numToKeep(20)
          }
        }
        triggers {
          periodic(5)
        }
      }

unclassified:
  location:
    url: "${JENKINS_URL:-http://localhost:8080/}"
    adminAddress: "${JENKINS_ADMIN_EMAIL:-admin@course-platform.com}"

  globalLibraries:
    libraries:
      - name: "course-platform-shared-library"
        defaultVersion: "main"
        retriever:
          modernSCM:
            scm:
              github:
                credentialsId: "github-credentials"
                repoOwner: "your-org"
                repository: "jenkins-shared-library"

  sonarGlobalConfiguration:
    installations:
      - name: "SonarQube"
        serverUrl: "${SONAR_HOST_URL:-http://sonarqube:9000}"
        credentialsId: "sonar-token"

  slackNotifier:
    teamDomain: "${SLACK_TEAM_DOMAIN}"
    token: "${SLACK_TOKEN}"
    room: "#ci-cd"

  prometheus:
    path: "/prometheus"
    defaultNamespace: "jenkins"
    jobAttributeName: "jenkins_job"
    appendJobBuildNumber: false
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    countFailedBuilds: true
    countNotBuiltBuilds: true
    countAbortedBuilds: true
    fetchTestResults: true

  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
      - simpleBuildDiscarder:
          discarder:
            logRotator:
              daysToKeepStr: "30"
              numToKeepStr: "50"
              artifactDaysToKeepStr: "7"
              artifactNumToKeepStr: "10"