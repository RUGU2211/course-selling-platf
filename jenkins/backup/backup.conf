# Jenkins Backup Configuration File
# This file contains configuration settings for Jenkins backup scripts

# =============================================================================
# JENKINS CONFIGURATION
# =============================================================================

# Jenkins home directory
JENKINS_HOME="/var/jenkins_home"

# Jenkins user and group (for setting permissions)
JENKINS_USER="jenkins"
JENKINS_GROUP="jenkins"

# Jenkins service name (for stopping/starting during restore)
JENKINS_SERVICE="jenkins"

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Backup directory (local storage)
BACKUP_DIR="/backup/jenkins"

# Backup retention period in days
RETENTION_DAYS=30

# Backup type: full, incremental, config-only
BACKUP_TYPE="full"

# Maximum number of parallel backup processes
MAX_PARALLEL_BACKUPS=1

# Backup timeout in seconds (1 hour = 3600)
BACKUP_TIMEOUT=3600

# Compression level (1-9, where 9 is maximum compression)
COMPRESSION_LEVEL=6

# =============================================================================
# S3 CONFIGURATION (Optional)
# =============================================================================

# S3 bucket for remote backup storage
S3_BUCKET=""

# S3 prefix for backup files
S3_PREFIX="jenkins-backups"

# AWS region
AWS_REGION="us-east-1"

# S3 storage class (STANDARD, STANDARD_IA, GLACIER, DEEP_ARCHIVE)
S3_STORAGE_CLASS="STANDARD_IA"

# Enable S3 server-side encryption
S3_ENCRYPTION="true"

# =============================================================================
# NOTIFICATION CONFIGURATION
# =============================================================================

# Slack webhook URL for notifications
SLACK_WEBHOOK_URL=""

# Slack channel for notifications (optional, uses webhook default if not set)
SLACK_CHANNEL="#ci-cd"

# Email recipients for notifications (comma-separated)
EMAIL_RECIPIENTS=""

# Email sender address
EMAIL_SENDER="jenkins-backup@example.com"

# SMTP server configuration (if using email notifications)
SMTP_SERVER=""
SMTP_PORT="587"
SMTP_USERNAME=""
SMTP_PASSWORD=""
SMTP_USE_TLS="true"

# =============================================================================
# HEALTH CHECK CONFIGURATION
# =============================================================================

# Jenkins health check URL
HEALTH_CHECK_URL="http://localhost:8080/login"

# Health check timeout in seconds
HEALTH_CHECK_TIMEOUT=30

# External health check service URL (e.g., Healthchecks.io)
HEALTHCHECK_PING_URL=""

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================

# Prometheus pushgateway URL for metrics
PROMETHEUS_PUSHGATEWAY_URL=""

# Metrics job name
METRICS_JOB_NAME="jenkins-backup"

# Enable detailed metrics collection
ENABLE_METRICS="true"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Encrypt backup files (requires gpg)
ENCRYPT_BACKUPS="false"

# GPG recipient for encryption
GPG_RECIPIENT=""

# GPG key ID for signing
GPG_SIGN_KEY=""

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Exclude patterns for backup (space-separated)
EXCLUDE_PATTERNS="*.tmp *.log builds/*/workspace builds/*/archive node_modules target"

# Include only specific job patterns (empty means include all)
INCLUDE_JOB_PATTERNS=""

# Maximum backup file size in MB (0 = no limit)
MAX_BACKUP_SIZE=0

# Enable incremental backup using rsync
ENABLE_INCREMENTAL="false"

# Incremental backup base directory
INCREMENTAL_BASE_DIR="${BACKUP_DIR}/incremental"

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log file location
LOG_FILE="/var/log/jenkins-backup.log"

# Log level (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL="INFO"

# Maximum log file size in MB
MAX_LOG_SIZE=10

# Number of log files to keep
LOG_RETENTION_COUNT=5

# Enable syslog logging
ENABLE_SYSLOG="false"

# Syslog facility
SYSLOG_FACILITY="local0"

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================

# Number of CPU cores to use for compression (0 = auto-detect)
COMPRESSION_THREADS=0

# I/O nice level (0-7, where 7 is lowest priority)
IONICE_LEVEL=7

# CPU nice level (-20 to 19, where 19 is lowest priority)
CPU_NICE_LEVEL=10

# Bandwidth limit for S3 uploads in KB/s (0 = no limit)
S3_BANDWIDTH_LIMIT=0

# =============================================================================
# DISASTER RECOVERY CONFIGURATION
# =============================================================================

# Enable cross-region S3 replication
ENABLE_S3_REPLICATION="false"

# Secondary S3 bucket for replication
S3_REPLICA_BUCKET=""

# Secondary AWS region
S3_REPLICA_REGION=""

# Enable backup verification
ENABLE_BACKUP_VERIFICATION="true"

# Test restore percentage (0-100, percentage of backups to test restore)
TEST_RESTORE_PERCENTAGE=10

# =============================================================================
# CUSTOM HOOKS
# =============================================================================

# Pre-backup hook script (executed before backup starts)
PRE_BACKUP_HOOK=""

# Post-backup hook script (executed after backup completes)
POST_BACKUP_HOOK=""

# Pre-restore hook script (executed before restore starts)
PRE_RESTORE_HOOK=""

# Post-restore hook script (executed after restore completes)
POST_RESTORE_HOOK=""

# Backup failure hook script (executed if backup fails)
BACKUP_FAILURE_HOOK=""

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================

# Environment name (development, staging, production)
ENVIRONMENT="production"

# Environment-specific configurations
case "$ENVIRONMENT" in
    development)
        RETENTION_DAYS=7
        BACKUP_TYPE="config-only"
        S3_STORAGE_CLASS="STANDARD"
        ;;
    staging)
        RETENTION_DAYS=14
        BACKUP_TYPE="full"
        S3_STORAGE_CLASS="STANDARD_IA"
        ;;
    production)
        RETENTION_DAYS=30
        BACKUP_TYPE="full"
        S3_STORAGE_CLASS="STANDARD_IA"
        ENABLE_S3_REPLICATION="true"
        ENCRYPT_BACKUPS="true"
        ;;
esac

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

# Validate configuration function
validate_config() {
    local errors=0
    
    # Check required directories
    if [[ ! -d "$JENKINS_HOME" ]]; then
        echo "ERROR: Jenkins home directory not found: $JENKINS_HOME"
        ((errors++))
    fi
    
    # Check backup directory is writable
    if [[ ! -w "$(dirname "$BACKUP_DIR")" ]]; then
        echo "ERROR: Backup directory parent is not writable: $(dirname "$BACKUP_DIR")"
        ((errors++))
    fi
    
    # Validate retention days
    if [[ ! "$RETENTION_DAYS" =~ ^[0-9]+$ ]] || [[ "$RETENTION_DAYS" -lt 1 ]]; then
        echo "ERROR: Invalid retention days: $RETENTION_DAYS"
        ((errors++))
    fi
    
    # Validate backup type
    case "$BACKUP_TYPE" in
        full|incremental|config-only)
            ;;
        *)
            echo "ERROR: Invalid backup type: $BACKUP_TYPE"
            ((errors++))
            ;;
    esac
    
    # Validate S3 configuration if bucket is set
    if [[ -n "$S3_BUCKET" ]]; then
        if ! command -v aws >/dev/null 2>&1; then
            echo "ERROR: AWS CLI not found but S3 bucket is configured"
            ((errors++))
        fi
        
        if [[ -z "$AWS_REGION" ]]; then
            echo "ERROR: AWS region not set but S3 bucket is configured"
            ((errors++))
        fi
    fi
    
    # Validate encryption configuration
    if [[ "$ENCRYPT_BACKUPS" == "true" ]]; then
        if ! command -v gpg >/dev/null 2>&1; then
            echo "ERROR: GPG not found but backup encryption is enabled"
            ((errors++))
        fi
        
        if [[ -z "$GPG_RECIPIENT" ]]; then
            echo "ERROR: GPG recipient not set but backup encryption is enabled"
            ((errors++))
        fi
    fi
    
    # Validate timeout values
    if [[ ! "$BACKUP_TIMEOUT" =~ ^[0-9]+$ ]] || [[ "$BACKUP_TIMEOUT" -lt 60 ]]; then
        echo "ERROR: Invalid backup timeout: $BACKUP_TIMEOUT (minimum 60 seconds)"
        ((errors++))
    fi
    
    if [[ ! "$HEALTH_CHECK_TIMEOUT" =~ ^[0-9]+$ ]] || [[ "$HEALTH_CHECK_TIMEOUT" -lt 5 ]]; then
        echo "ERROR: Invalid health check timeout: $HEALTH_CHECK_TIMEOUT (minimum 5 seconds)"
        ((errors++))
    fi
    
    return $errors
}

# =============================================================================
# CONFIGURATION EXAMPLES
# =============================================================================

# Example configurations for different environments:

# DEVELOPMENT ENVIRONMENT
# JENKINS_HOME="/opt/jenkins"
# BACKUP_DIR="/tmp/jenkins-backups"
# RETENTION_DAYS=3
# BACKUP_TYPE="config-only"
# S3_BUCKET=""
# SLACK_WEBHOOK_URL="https://hooks.slack.com/services/DEV/WEBHOOK"

# STAGING ENVIRONMENT
# JENKINS_HOME="/var/jenkins_home"
# BACKUP_DIR="/backup/jenkins"
# RETENTION_DAYS=7
# BACKUP_TYPE="full"
# S3_BUCKET="staging-jenkins-backups"
# SLACK_WEBHOOK_URL="https://hooks.slack.com/services/STAGING/WEBHOOK"

# PRODUCTION ENVIRONMENT
# JENKINS_HOME="/var/jenkins_home"
# BACKUP_DIR="/backup/jenkins"
# RETENTION_DAYS=30
# BACKUP_TYPE="full"
# S3_BUCKET="prod-jenkins-backups"
# ENCRYPT_BACKUPS="true"
# GPG_RECIPIENT="backup@company.com"
# ENABLE_S3_REPLICATION="true"
# S3_REPLICA_BUCKET="prod-jenkins-backups-replica"
# S3_REPLICA_REGION="us-west-2"
# SLACK_WEBHOOK_URL="https://hooks.slack.com/services/PROD/WEBHOOK"
# EMAIL_RECIPIENTS="devops@company.com,admin@company.com"

# =============================================================================
# NOTES
# =============================================================================

# 1. All paths should be absolute paths
# 2. Ensure the Jenkins user has read access to this configuration file
# 3. Sensitive values (like webhook URLs, passwords) should be set via environment variables
# 4. Test your configuration with the --test flag before scheduling cron jobs
# 5. Monitor backup logs regularly and set up alerting for failures
# 6. Regularly test restore procedures to ensure backups are valid
# 7. Consider using a secrets management system for sensitive configuration values