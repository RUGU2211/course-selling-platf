// File path: /api-gateway/Jenkinsfile

pipeline {
    agent {
        // Use a consistent environment
        docker {
            image 'maven:3.9-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2'
        }
    }

    environment {
        // The service name is specific to this Jenkinsfile
        SERVICE_NAME = "api-gateway"
        DOCKER_REGISTRY = "rugved2211"
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${env.SERVICE_NAME}:${env.BUILD_NUMBER}"
    }

    tools {
        jdk 'jdk-17'
        maven 'maven-3.9'
    }

    stages {
        stage('Build & Test') {
            steps {
                echo "Building and testing ${SERVICE_NAME}..."
                // 'mvn clean package' is run inside the 'api-gateway' directory
                sh 'mvn clean package -DskipTests=false'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        docker build -t ${DOCKER_IMAGE} .
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying ${SERVICE_NAME}..."
                // This step assumes a remote server is set up to receive the deployment command
                sh "ssh user@your-deployment-server 'docker-compose -f /path/to/docker-compose.yml up -d ${SERVICE_NAME}'"
            }
        }
    }

    // Notifications and cleanup
    post {
        always {
            cleanWs()
        }
    }
}