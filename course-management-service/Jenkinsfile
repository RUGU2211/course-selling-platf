// File path: /course-management-service/Jenkinsfile

pipeline {
    agent {
        // Use a consistent environment
        docker {
            image 'maven:3.9.1-eclipse-temurin-17' 
            args '-v $HOME/.m2:/root/.m2' 
        }
    }

    tools {
        // These names must exactly match the names configured in Jenkins
        jdk 'JDK 17'        
        maven 'Maven 3.9'
    }

    environment {
        SERVICE_NAME = "course-management-service"
        DOCKER_IMAGE = "rugved2211/${env.SERVICE_NAME}:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                // The Multibranch Pipeline job already handles the git checkout
                // This step is redundant and can be removed
                echo 'Skipping Git checkout as it is handled by the SCM'
            }
        }

        stage('Build & Test') {
            steps {
                // The `dir` step is not needed if the Jenkinsfile is in the service directory
                echo "Building and testing ${SERVICE_NAME}..."
                sh 'mvn clean package -DskipTests=false'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        docker build -t ${DOCKER_IMAGE} .
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying ${SERVICE_NAME}..."
                // Example for Docker Compose
                sh "ssh user@your-server 'docker-compose -f /path/to/docker-compose.yml up -d ${SERVICE_NAME}'"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}