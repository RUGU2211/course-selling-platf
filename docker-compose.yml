version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: course-platform-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: course_platform
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Service Discovery
  eureka-server:
    build: ./eureka-server
    container_name: course-platform-eureka
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Configuration Server
  config-server:
    build: ./config-server
    container_name: course-platform-config
    ports:
      - "8888:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s


  # User Management Service
  user-service:
    build: ./user-management-service
    container_name: course-platform-user-service
    ports:
      - "8082:8082"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/users_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Course Management Service
  course-service:
    build: ./course-management-service
    container_name: course-platform-course-service
    ports:
      - "8083:8083"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=course-management-service
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/courses_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Enrollment Service
  enrollment-service:
    build: ./enrollmentservice
    container_name: course-platform-enrollment-service
    ports:
      - "8084:8084"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/enrollment_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/enrollment-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: course-platform-notification-service
    ports:
      - "8085:8085"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/notification_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Payment Service
  payment-service:
    build: ./payment
    container_name: course-platform-payment-service
    ports:
      - "8086:8086"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/payment_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
      - RAZORPAY_KEY_ID=rzp_test_RFRsRbzTz9Hd8W
      - RAZORPAY_KEY_SECRET=qobxRuHoIbt4WymMCtZAgR1o
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Content Delivery Service
  content-service:
    build: ./content-delivery-service
    container_name: course-platform-content-service
    ports:
      - "8087:8087"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://course-platform-mysql:3306/content_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: course-platform-api-gateway
    ports:
      - "8765:8765"
    depends_on:
      user-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
      enrollment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://course-platform-eureka:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://course-platform-config:8888
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=true
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Frontend Application
  frontend:
    build: ./frontend
    container_name: course-platform-frontend
    ports:
      - "3000:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - VITE_API_URL=http://localhost:8765
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Prometheus Monitoring
  # Note: For local development, Prometheus, Grafana, and Jenkins are disabled.
  # Uncomment below if you need them locally.
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - api-gateway
  #
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - prometheus
  #
  # jenkins:
  #   image: jenkins/jenkins:lts
  #   ports:
  #     - "8081:8080"
  #     - "50000:50000"
  #   volumes:
  #     - jenkins-data:/var/jenkins_home
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - microservices-network


volumes:
  mysql-data:

networks:
  microservices-network:
    driver: bridge
